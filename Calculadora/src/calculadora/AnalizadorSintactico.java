
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 04 10:40:58 CST 2024
//----------------------------------------------------

package calculadora;

import java_cup.runtime.*;
import calculadora.VentanaEstructuraCLASS;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 04 10:40:58 CST 2024
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\003\000\002\002\004\000\002\026" +
    "\011\000\002\026\010\000\002\033\010\000\002\034\004" +
    "\000\002\034\003\000\002\032\016\000\002\032\017\000" +
    "\002\032\020\000\002\030\004\000\002\030\003\000\002" +
    "\031\006\000\002\017\004\000\002\017\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\003\011\000\002\003\015\000" +
    "\002\004\005\000\002\004\005\000\002\007\004\000\002" +
    "\007\003\000\002\010\010\000\002\010\010\000\002\010" +
    "\003\000\002\011\011\000\002\012\013\000\002\013\015" +
    "\000\002\014\014\000\002\014\016\000\002\015\004\000" +
    "\002\015\003\000\002\016\010\000\002\016\011\000\002" +
    "\005\005\000\002\005\005\000\002\006\005\000\002\006" +
    "\005\000\002\020\013\000\002\020\014\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\022\002\000\002\022\004\000\002\022" +
    "\007\000\002\025\004\000\002\025\003\000\002\024\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\010\031\004\032\010\043\006\001\002\000" +
    "\016\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\044\uffd5" +
    "\001\002\000\004\040\013\001\002\000\016\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\040\uffd3\044\uffd3\001\002\000\004" +
    "\002\001\001\002\000\016\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\040\uffd4\044\uffd4\001\002\000\004\002\012\001\002" +
    "\000\004\002\000\001\002\000\004\011\014\001\002\000" +
    "\004\007\015\001\002\000\010\031\004\032\022\043\006" +
    "\001\002\000\004\010\257\001\002\000\010\031\004\032" +
    "\010\043\006\001\002\000\014\033\216\034\211\035\215" +
    "\036\214\044\212\001\002\000\010\031\ufff6\032\ufff6\043" +
    "\ufff6\001\002\000\016\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\043\023\044\uffd4\001\002\000\004\036\024\001\002\000" +
    "\004\045\025\001\002\000\004\005\026\001\002\000\004" +
    "\044\027\001\002\000\004\041\030\001\002\000\004\042" +
    "\031\001\002\000\004\011\032\001\002\000\004\006\033" +
    "\001\002\000\004\007\034\001\002\000\006\010\035\047" +
    "\036\001\002\000\004\010\ufffa\001\002\000\004\005\204" +
    "\001\002\000\022\004\ufffb\010\ufffb\020\ufffb\021\ufffb\023" +
    "\ufffb\024\ufffb\030\ufffb\047\ufffb\001\002\000\020\004\046" +
    "\010\047\020\041\021\055\023\043\024\051\047\036\001" +
    "\002\000\004\005\176\001\002\000\022\004\ufffc\010\ufffc" +
    "\020\ufffc\021\ufffc\023\ufffc\024\ufffc\030\ufffc\047\ufffc\001" +
    "\002\000\004\005\153\001\002\000\022\004\ufff2\010\ufff2" +
    "\011\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\030\ufff2\001" +
    "\002\000\022\004\ufff1\010\ufff1\011\ufff1\020\ufff1\021\ufff1" +
    "\023\ufff1\024\ufff1\030\ufff1\001\002\000\004\005\141\001" +
    "\002\000\004\010\ufff9\001\002\000\022\004\uffee\010\uffee" +
    "\011\uffee\020\uffee\021\uffee\023\uffee\024\uffee\030\uffee\001" +
    "\002\000\004\005\106\001\002\000\004\010\105\001\002" +
    "\000\022\004\ufff0\010\ufff0\011\ufff0\020\ufff0\021\ufff0\023" +
    "\ufff0\024\ufff0\030\ufff0\001\002\000\022\004\uffef\010\uffef" +
    "\011\uffef\020\uffef\021\uffef\023\uffef\024\uffef\030\uffef\001" +
    "\002\000\004\007\056\001\002\000\016\004\046\011\060" +
    "\020\041\021\055\023\043\024\051\001\002\000\022\004" +
    "\uffe8\010\uffe8\011\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\030\uffe8\001\002\000\004\016\076\001\002\000\022\004" +
    "\uffe5\010\uffe5\011\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5" +
    "\030\uffe5\001\002\000\020\004\046\010\064\011\060\020" +
    "\041\021\055\023\043\024\051\001\002\000\022\004\uffe9" +
    "\010\uffe9\011\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\030" +
    "\uffe9\001\002\000\004\020\065\001\002\000\004\005\066" +
    "\001\002\000\004\011\067\001\002\000\004\012\073\001" +
    "\002\000\004\006\071\001\002\000\004\015\072\001\002" +
    "\000\022\004\uffe3\010\uffe3\011\uffe3\020\uffe3\021\uffe3\023" +
    "\uffe3\024\uffe3\030\uffe3\001\002\000\006\011\075\013\074" +
    "\001\002\000\006\006\uffeb\015\uffeb\001\002\000\006\006" +
    "\uffea\015\uffea\001\002\000\004\011\077\001\002\000\004" +
    "\014\100\001\002\000\006\011\101\013\102\001\002\000" +
    "\004\015\104\001\002\000\004\015\103\001\002\000\022" +
    "\004\uffe7\010\uffe7\011\uffe7\020\uffe7\021\uffe7\023\uffe7\024" +
    "\uffe7\030\uffe7\001\002\000\022\004\uffe6\010\uffe6\011\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\024\uffe6\030\uffe6\001\002\000" +
    "\004\010\ufff8\001\002\000\004\011\107\001\002\000\004" +
    "\006\110\001\002\000\004\007\111\001\002\000\004\025" +
    "\114\001\002\000\006\025\114\026\130\001\002\000\006" +
    "\025\uffde\026\uffde\001\002\000\006\013\115\050\116\001" +
    "\002\000\004\027\124\001\002\000\004\050\117\001\002" +
    "\000\004\027\120\001\002\000\004\047\036\001\002\000" +
    "\006\030\122\047\036\001\002\000\004\015\123\001\002" +
    "\000\006\025\uffdc\026\uffdc\001\002\000\016\004\046\011" +
    "\060\020\041\021\055\023\043\024\051\001\002\000\020" +
    "\004\046\011\060\020\041\021\055\023\043\024\051\030" +
    "\126\001\002\000\004\015\127\001\002\000\006\025\uffdd" +
    "\026\uffdd\001\002\000\004\027\132\001\002\000\006\025" +
    "\uffdf\026\uffdf\001\002\000\020\004\046\011\060\020\041" +
    "\021\055\023\043\024\051\047\036\001\002\000\006\030" +
    "\136\047\036\001\002\000\020\004\046\010\135\011\060" +
    "\020\041\021\055\023\043\024\051\001\002\000\022\004" +
    "\uffe1\010\uffe1\011\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\030\uffe1\001\002\000\004\015\137\001\002\000\004\010" +
    "\140\001\002\000\022\004\uffe0\010\uffe0\011\uffe0\020\uffe0" +
    "\021\uffe0\023\uffe0\024\uffe0\030\uffe0\001\002\000\004\011" +
    "\067\001\002\000\004\006\143\001\002\000\004\007\144" +
    "\001\002\000\016\004\046\011\060\020\041\021\055\023" +
    "\043\024\051\001\002\000\020\004\046\010\146\011\060" +
    "\020\041\021\055\023\043\024\051\001\002\000\024\004" +
    "\uffed\010\uffed\011\uffed\017\147\020\uffed\021\uffed\023\uffed" +
    "\024\uffed\030\uffed\001\002\000\004\007\150\001\002\000" +
    "\016\004\046\011\060\020\041\021\055\023\043\024\051" +
    "\001\002\000\020\004\046\010\152\011\060\020\041\021" +
    "\055\023\043\024\051\001\002\000\022\004\uffec\010\uffec" +
    "\011\uffec\020\uffec\021\uffec\023\uffec\024\uffec\030\uffec\001" +
    "\002\000\004\011\154\001\002\000\004\016\173\001\002" +
    "\000\004\015\156\001\002\000\004\011\067\001\002\000" +
    "\004\015\160\001\002\000\004\011\161\001\002\000\006" +
    "\014\167\022\170\001\002\000\004\006\163\001\002\000" +
    "\004\007\164\001\002\000\016\004\046\011\060\020\041" +
    "\021\055\023\043\024\051\001\002\000\020\004\046\010" +
    "\166\011\060\020\041\021\055\023\043\024\051\001\002" +
    "\000\022\004\uffe2\010\uffe2\011\uffe2\020\uffe2\021\uffe2\023" +
    "\uffe2\024\uffe2\030\uffe2\001\002\000\004\014\172\001\002" +
    "\000\004\022\171\001\002\000\004\006\uffd8\001\002\000" +
    "\004\006\uffd9\001\002\000\006\011\175\013\174\001\002" +
    "\000\004\015\uffdb\001\002\000\004\015\uffda\001\002\000" +
    "\004\011\067\001\002\000\004\006\200\001\002\000\004" +
    "\007\201\001\002\000\016\004\046\011\060\020\041\021" +
    "\055\023\043\024\051\001\002\000\020\004\046\010\203" +
    "\011\060\020\041\021\055\023\043\024\051\001\002\000" +
    "\022\004\uffe4\010\uffe4\011\uffe4\020\uffe4\021\uffe4\023\uffe4" +
    "\024\uffe4\030\uffe4\001\002\000\004\046\205\001\002\000" +
    "\004\046\206\001\002\000\004\006\207\001\002\000\004" +
    "\015\210\001\002\000\022\004\ufffd\010\ufffd\020\ufffd\021" +
    "\ufffd\023\ufffd\024\ufffd\030\ufffd\047\ufffd\001\002\000\004" +
    "\011\uffd1\001\002\000\004\011\uffce\001\002\000\004\011" +
    "\217\001\002\000\004\011\uffcf\001\002\000\004\011\uffd0" +
    "\001\002\000\004\011\uffd2\001\002\000\004\015\220\001" +
    "\002\000\010\031\ufff5\032\ufff5\043\ufff5\001\002\000\014" +
    "\033\216\034\211\035\215\036\214\044\212\001\002\000" +
    "\010\031\ufff7\032\ufff7\043\ufff7\001\002\000\012\010\225" +
    "\031\004\032\010\043\006\001\002\000\012\010\ufff3\031" +
    "\ufff3\032\ufff3\043\ufff3\001\002\000\004\002\uffff\001\002" +
    "\000\014\033\216\034\211\035\215\036\214\044\212\001" +
    "\002\000\012\010\ufff4\031\ufff4\032\ufff4\043\ufff4\001\002" +
    "\000\004\011\231\001\002\000\004\005\232\001\002\000" +
    "\016\006\uffcd\033\216\034\211\035\215\036\214\044\212" +
    "\001\002\000\004\011\251\001\002\000\004\006\235\001" +
    "\002\000\004\007\236\001\002\000\030\004\046\011\060" +
    "\020\041\021\055\023\043\024\051\033\216\034\211\035" +
    "\215\036\214\044\212\001\002\000\020\004\046\010\250" +
    "\011\060\020\041\021\055\023\043\024\051\001\002\000" +
    "\030\004\046\011\060\020\041\021\055\023\043\024\051" +
    "\033\216\034\211\035\215\036\214\044\212\001\002\000" +
    "\004\011\243\001\002\000\030\004\uffc9\011\uffc9\020\uffc9" +
    "\021\uffc9\023\uffc9\024\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\044\uffc9\001\002\000\004\015\244\001\002\000\030" +
    "\004\uffc8\011\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\044\uffc8\001\002\000\020" +
    "\004\046\010\247\011\060\020\041\021\055\023\043\024" +
    "\051\001\002\000\030\004\uffca\011\uffca\020\uffca\021\uffca" +
    "\023\uffca\024\uffca\033\uffca\034\uffca\035\uffca\036\uffca\044" +
    "\uffca\001\002\000\012\010\uffd6\031\uffd6\032\uffd6\043\uffd6" +
    "\001\002\000\012\010\uffd7\031\uffd7\032\uffd7\043\uffd7\001" +
    "\002\000\006\006\uffcc\037\252\001\002\000\014\033\216" +
    "\034\211\035\215\036\214\044\212\001\002\000\004\011" +
    "\254\001\002\000\004\006\uffcb\001\002\000\004\011\256" +
    "\001\002\000\006\005\232\015\220\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\010\002\010\021\004\026\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\017" +
    "\030\016\031\020\032\015\001\001\000\002\001\001\000" +
    "\012\017\222\020\223\021\220\031\221\001\001\000\004" +
    "\023\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\036" +
    "\034\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\043\011\044\012\052\013\053" +
    "\014\047\027\051\033\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\043\007" +
    "\061\010\056\011\044\012\052\013\053\014\047\027\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\043\010\062\011\044\012\052\013\053" +
    "\014\047\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\111\016\112\001\001" +
    "\000\004\016\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\036\034\120\001\001\000\004\033\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\043" +
    "\007\124\010\056\011\044\012\052\013\053\014\047\027" +
    "\060\001\001\000\020\003\043\010\062\011\044\012\052" +
    "\013\053\014\047\027\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\043\007\133\010\056\011\044\012\052\013\053\014" +
    "\047\027\060\033\036\034\132\001\001\000\004\033\041" +
    "\001\001\000\020\003\043\010\062\011\044\012\052\013" +
    "\053\014\047\027\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\043\007\144\010\056\011\044\012\052\013\053\014" +
    "\047\027\060\001\001\000\020\003\043\010\062\011\044" +
    "\012\052\013\053\014\047\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\043\007\150\010\056" +
    "\011\044\012\052\013\053\014\047\027\060\001\001\000" +
    "\020\003\043\010\062\011\044\012\052\013\053\014\047" +
    "\027\060\001\001\000\002\001\001\000\004\005\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\156" +
    "\001\001\000\002\001\001\000\004\006\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\043\007\164\010\056\011\044\012\052\013\053\014" +
    "\047\027\060\001\001\000\020\003\043\010\062\011\044" +
    "\012\052\013\053\014\047\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\043\007\201\010\056\011" +
    "\044\012\052\013\053\014\047\027\060\001\001\000\020" +
    "\003\043\010\062\011\044\012\052\013\053\014\047\027" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\254\001\001" +
    "\000\002\001\001\000\006\020\226\021\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\233\023\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\043\007\236\010" +
    "\056\011\044\012\052\013\053\014\047\023\240\024\241" +
    "\025\237\027\060\001\001\000\020\003\043\010\062\011" +
    "\044\012\052\013\053\014\047\027\060\001\001\000\026" +
    "\003\043\007\244\010\056\011\044\012\052\013\053\014" +
    "\047\023\240\024\245\027\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\043\010\062\011\044\012\052\013\053\014\047" +
    "\027\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Una vez que se produce un "error sintáctico" se invoca
    // el método "syntax_error(Symbol actualToken)".
    // El objeto "actualToken" de la clase Symbol, representa
    // el último Token consumido por el analizador sintáctico.
    // Se redefine el método "syntax_error(Symbol actualToken)"
    public void syntax_error(Symbol actualToken){
        System.err.println("Error fatal.");
        report_error("Error de sintaxis: linea " + (actualToken.left + 1) + 
                     ", columna " + (actualToken.right + 1), null);
    }

    public static void main(String[] args) {
        try {
            AnalizadorLexico scanner = new AnalizadorLexico(new java.io.FileReader("src/calculadora/codigoFuente.txt"));
            AnalizadorSintactico parser = new AnalizadorSintactico(scanner);
            parser.parse();
        } catch (java.io.FileNotFoundException e) {
            System.out.println("File not found : \"codigoFuente.txt\"");
        } catch (java.io.IOException e) {
            System.out.println("IO error scanning file \"codigoFuente.txt\"");
            System.out.println(e);
        } catch (Exception e) {
            System.out.println("Unexpected exception:");
            e.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    private void muestra(String cad){
        VentanaEstructuraCLASS.agregarRes(cad);
    }
    private void muestraln(String cad){
        VentanaEstructuraCLASS.agregarRes(cad+"\n");
    }

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable ::= tipo_dato ID PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variables",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // argumentos ::= tipo_dato ID COMA tipo_dato ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("argumentos",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // argumentos ::= tipo_dato ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("argumentos",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("argumentos",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_dato ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_dato ::= VOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_dato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_dato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // m_acceso ::= STATIC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("m_acceso",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // m_acceso ::= PUBLICO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("m_acceso",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // m_acceso ::= PRIVADO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("m_acceso",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // metodo ::= m_acceso tipo_dato ID PARA argumentos PARC LLAVEA variables sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // metodo ::= m_acceso tipo_dato ID PARA argumentos PARC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodo",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // incremento ::= ID MENOS MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // incremento ::= ID MAS MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("incremento",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicializacion ::= ID IGUAL ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inicializacion ::= ID IGUAL NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicializacion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // caso ::= CASE COMILLASIM COMILLASIM DOS_P est_souts BREAK PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caso ::= CASE NUM DOS_P sentencias BREAK PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("caso",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // casos ::= casos caso 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // est_switch ::= SWITCH PARA ID PARC LLAVEA casos DEFAULT DOS_P est_souts BREAK PUNYCOM LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_switch",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // est_switch ::= SWITCH PARA ID PARC LLAVEA casos DEFAULT DOS_P sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_switch",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // est_for ::= FOR PARA inicializacion PUNYCOM condicion PUNYCOM incremento PARC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_for",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // est_do ::= DO LLAVEA sentencias LLAVEC WHILE PARA condicion PARC PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_do",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // est_while ::= WHILE PARA condicion PARC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_while",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= estructura 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= ID IGUAL ID MAS ID PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= ID IGUAL ID MAS NUM PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicion ::= ID OPR ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicion ::= ID OPR NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // est_if ::= IF PARA condicion PARC LLAVEA sentencias LLAVEC ELSE LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_if",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // est_if ::= IF PARA condicion PARC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_if",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura ::= est_switch 
            {
              Object RESULT =null;
		 muestraln("Estructura SWITCH correcta"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura ::= est_for 
            {
              Object RESULT =null;
		 muestraln("Estructura FOR correcta"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura ::= est_do 
            {
              Object RESULT =null;
		 muestraln("Estructura DO_WHILE correcta"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura ::= est_while 
            {
              Object RESULT =null;
		 muestraln("Estructura WHILE correcta"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura ::= est_if 
            {
              Object RESULT =null;
		 muestraln("Estructura IF correcta"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodos ::= metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodos ::= metodos metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributo ::= m_acceso tipo_dato ID PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("atributo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributos ::= atributo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("atributos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributos ::= atributos atributo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("atributos",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main ::= PUBLICO STATIC VOID MAIN PARA STRING COR CORA ID PARC LLAVEA est_souts estructura LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main ::= PUBLICO STATIC VOID MAIN PARA STRING COR CORA ID PARC LLAVEA est_souts LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= PUBLICO STATIC VOID MAIN PARA STRING COR CORA ID PARC LLAVEA LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // est_souts ::= est_sout 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_souts",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // est_souts ::= est_souts est_sout 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_souts",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // est_sout ::= SOUT PARA COMILLA COMILLA PARC PUNYCOM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_sout",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // est_prog ::= m_acceso CLASS ID LLAVEA main LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_prog",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // est_prog ::= m_acceso CLASS ID LLAVEA atributos metodos LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("est_prog",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= est_prog 
            {
              Object RESULT =null;
		 muestraln("Estructura PROGRAMA Correcta\n\n"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

